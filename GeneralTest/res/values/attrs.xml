<?xml version="1.0" encoding="UTF-8"?>
<resources>
	<declare-styleable name="AbsSpinner">
		<!--
			Reference to an array resource that will populate the Spinner. For
			static content, this is simpler than populating the Spinner
			programmatically.
		-->
		<attr name="entries" />
	</declare-styleable>

	<attr name="entries" format="reference" />
	<declare-styleable name="VerticalGallery">
		<attr name="gravity" />
		<!--
			Sets how long a transition animation should run (in milliseconds)
			when layout has changed. Only relevant if animation is turned on.
		-->
		<attr name="animationDuration" format="integer" min="0" />
		<attr name="spacing" format="dimension" />
		<!-- Sets the alpha on the items that are not selected. -->
		<attr name="unselectedAlpha" format="float" />
	</declare-styleable>

	<attr name="gravity">
		<!-- Push object to the top of its container, not changing its size. -->
		<flag name="top" value="0x30" />
		<!--
			Push object to the bottom of its container, not changing its size.
		-->
		<flag name="bottom" value="0x50" />
		<!--
			Push object to the left of its container, not changing its size.
		-->
		<flag name="left" value="0x03" />
		<!--
			Push object to the right of its container, not changing its size.
		-->
		<flag name="right" value="0x05" />
		<!--
			Place object in the vertical center of its container, not changing
			its size.
		-->
		<flag name="center_vertical" value="0x10" />
		<!--
			Grow the vertical size of the object if needed so it completely fills
			its container.
		-->
		<flag name="fill_vertical" value="0x70" />
		<!--
			Place object in the horizontal center of its container, not changing
			its size.
		-->
		<flag name="center_horizontal" value="0x01" />
		<!--
			Grow the horizontal size of the object if needed so it completely
			fills its container.
		-->
		<flag name="fill_horizontal" value="0x07" />
		<!--
			Place the object in the center of its container in both the vertical
			and horizontal axis, not changing its size.
		-->
		<flag name="center" value="0x11" />
		<!--
			Grow the horizontal and vertical size of the object if needed so it
			completely fills its container.
		-->
		<flag name="fill" value="0x77" />
		<!--
			Additional option that can be set to have the top and/or bottom edges
			of the child clipped to its container's bounds. The clip will be
			based on the vertical gravity: a top gravity will clip the bottom
			edge, a bottom gravity will clip the top edge, and neither will clip
			both edges.
		-->
		<flag name="clip_vertical" value="0x80" />
		<!--
			Additional option that can be set to have the left and/or right edges
			of the child clipped to its container's bounds. The clip will be
			based on the horizontal gravity: a left gravity will clip the right
			edge, a right gravity will clip the left edge, and neither will clip
			both edges.
		-->
		<flag name="clip_horizontal" value="0x08" />
	</attr>
	<attr name="verticalgalleryStyle" format="reference" />
	    <declare-styleable name="Gallery1">
        <attr name="android:galleryItemBackground" />
    </declare-styleable>
       <declare-styleable name="DatePicker">
        <!-- The first year (inclusive), for example "1940". -->
        <attr name="startYear" format="integer" />
        <!-- The last year (inclusive), for example "2010". -->
        <attr name="endYear" format="integer" />
    </declare-styleable> 
    
    <declare-styleable name="Theme">
        <!-- ============== -->
        <!-- Generic styles -->
        <!-- ============== -->
        <eat-comment />


        <!-- ============= -->
        <!-- Window styles -->
        <!-- ============= -->
        <eat-comment />

        <!-- Drawable to use as the overall window background.  There are a
             few special considerations you should use when settings this
             drawable:
             <ul>
             <li> This information will be used to infer the pixel format
                  for your window's surface.  If the drawable has any
                  non-opaque pixels, your window will be translucent
                  (32 bpp).
             <li> If you want to draw the entire background
                  yourself, you should set this drawable to some solid
                  color that closely matches that background (so the
                  system's preview of your window will match), and
                  then in code manually set your window's background to
                  null so it will not be drawn.
             </ul> -->
        <attr name="windowBackground" format="reference" />
        <!-- Drawable to use as a frame around the window. -->
        <attr name="windowFrame" format="reference" />
        <!-- Flag indicating whether there should be no title on this window. -->
        <attr name="windowNoTitle" format="boolean" />
        <!-- Flag indicating whether this window should fill the entire screen. -->
        <attr name="windowFullscreen" format="boolean" />
        <!-- Flag indicating whether this is a floating window. -->
        <attr name="windowIsFloating" format="boolean" />
        <!-- Flag indicating whether this is a translucent window. -->
        <attr name="windowIsTranslucent" format="boolean" />
        <!-- Flag indicating that this window's background should be the
        	 user's current wallpaper. -->
        <attr name="windowShowWallpaper" format="boolean" />
        <!-- This Drawable is overlaid over the foreground of the Window's content area, usually
             to place a shadow below the title.  -->
        <attr name="windowContentOverlay" format="reference" />
        <!-- The style resource to use for a window's title bar height. -->
        <attr name="windowTitleSize" format="dimension" />
        <!-- The style resource to use for a window's title text. -->
        <attr name="windowTitleStyle" format="reference" />
        <!-- The style resource to use for a window's title area. -->
        <attr name="windowTitleBackgroundStyle" format="reference" />

        <!-- Reference to a style resource holding
             the set of window animations to use, which can be
             any of the attributes defined by
             {@link android.R.styleable#WindowAnimation}. -->
        <attr name="windowAnimationStyle" format="reference" />

        <!-- Defines the default soft input state that this window would
             like when it is displayed. -->
        <attr name="windowSoftInputMode">
            <!-- Not specified, use what the system thinks is best.  This
                 is the default. -->
            <flag name="stateUnspecified" value="0" />
            <!-- Leave the soft input window as-is, in whatever state it
                 last was. -->
            <flag name="stateUnchanged" value="1" />
            <!-- Make the soft input area hidden when normally appropriate
                 (when the user is navigating forward to your window). -->
            <flag name="stateHidden" value="2" />
            <!-- Always make the soft input area hidden when this window
                 has input focus. -->
            <flag name="stateAlwaysHidden" value="3" />
            <!-- Make the soft input area visible when normally appropriate
                 (when the user is navigating forward to your window). -->
            <flag name="stateVisible" value="4" />
            <!-- Always make the soft input area visible when this window
                 has input focus. -->
            <flag name="stateAlwaysVisible" value="5" />

            <!-- The window resize/pan adjustment has not been specified,
                 the system will automatically select between resize and pan
                 modes, depending
                 on whether the content of the window has any layout views
                 that can scroll their contents.  If there is such a view,
                 then the window will be resized, with the assumption being
                 that the resizeable area can be reduced to make room for
                 the input UI. -->
            <flag name="adjustUnspecified" value="0x00" />
            <!-- Always resize the window: the content area of the window is
                 reduced to make room for the soft input area. -->
            <flag name="adjustResize" value="0x10" />
            <!-- Don't resize the window to make room for the soft input area;
                 instead pan the contents of the window as focus moves inside
                 of it so that the user can see what they are typing.  This is
                 generally less desireable than panning because the user may
                 need to close the input area to get at and interact with
                 parts of the window. -->
            <flag name="adjustPan" value="0x20" />
        </attr>

        <!-- Flag allowing you to disable the preview animation for a window.
             The default value is false; if set to true, the system can never
             use the window's theme to show a preview of it before your
             actual instance is shown to the user. -->
        <attr name="windowDisablePreview" format="boolean" />

        <!-- Flag indicating that this window should not be displayed at all.
             The default value is false; if set to true, and this window is
             the main window of an Activity, then it will never actually
             be added to the window manager.  This means that your activity
             must immediately quit without waiting for user interaction,
             because there will be no such interaction coming. -->
        <attr name="windowNoDisplay" format="boolean" />

</declare-styleable>

</resources>